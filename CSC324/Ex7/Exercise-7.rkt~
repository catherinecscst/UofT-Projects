#lang racket #| CSC324 2017 Fall Exercise 7 |#

#| In this exercise you implement path finding via backtracking, expressing functions producing
    multiple results in single-result style.

 Both yielding and backtracking illustrate “inversion of control”, where the caller of a function
  takes control of the flow. This allows the big-bang animation at the end of the file to animate
  the paths algorithm that is reimplemented here.

 From the amb library, use only -< and fail in your implementation.
 Produce values only on-demand. In particluar, do not create a list and then pick elements from it
  [e.g. using an-element].
 Factor out repeated parts of a computation, especially for -<. For example, write (sqr (-< 2 3))
  rather than (-< (sqr 2) (sqr 3)). |#

(require "amb.rkt")
(trace #false)

; Implement backtracking function adjacent to produce one of the four points adjacent to spot.
; Use map appropriately.
; Using identity and reverse can make the symmetry of the choices especially explicit.
(define (adjacent spot)
  spot)

; Implement assert to take a boolean, and fail unless it's true.
(define assert void)

; Implement assert-then to take a condition expresson and one or more body expressions,
;  producing an expression that:
;   1. Fails unless the condition is true.
;   2. Otherwise evaluates the body expressions in order, producing the value of the last one.
(define then-assert void)

; Implement backtracking function path to produce a path from from to to through through.
; If partial? is true, include each valid partial path.
; Use assert and/or then-assert appropriately.
(define (path to through from [partial? #true])
  '())
  
(require (except-in rackunit fail))
(define figure-eight (list (list 0 0) (list 1 0) (list 2 0)
                           (list 0 1)            (list 2 1)
                           (list 0 2) (list 1 2) (list 2 2)
                           (list 0 3)            (list 2 3)
                           (list 0 4) (list 1 4) (list 2 4)))
(check-equal? (list-results (path (list 2 4) figure-eight (list 0 0)))
              '(()
                ((0 0))
                ((0 0) (0 1))
                ((0 0) (0 1) (0 2))
                ((0 0) (0 1) (0 2) (0 3))
                ((0 0) (0 1) (0 2) (0 3) (0 4))
                ((0 0) (0 1) (0 2) (0 3) (0 4) (1 4))
                ((0 0) (0 1) (0 2) (0 3) (0 4) (1 4) (2 4))
                ((0 0) (0 1) (0 2))
                ((0 0) (0 1) (0 2) (1 2))
                ((0 0) (0 1) (0 2) (1 2) (2 2))
                ((0 0) (0 1) (0 2) (1 2) (2 2) (2 1))
                ((0 0) (0 1) (0 2) (1 2) (2 2) (2 1) (2 0))
                ((0 0) (0 1) (0 2) (1 2) (2 2))
                ((0 0) (0 1) (0 2) (1 2) (2 2) (2 3))
                ((0 0) (0 1) (0 2) (1 2) (2 2) (2 3) (2 4))
                ((0 0))
                ((0 0) (1 0))
                ((0 0) (1 0) (2 0))
                ((0 0) (1 0) (2 0) (2 1))
                ((0 0) (1 0) (2 0) (2 1) (2 2))
                ((0 0) (1 0) (2 0) (2 1) (2 2) (2 3))
                ((0 0) (1 0) (2 0) (2 1) (2 2) (2 3) (2 4))
                ((0 0) (1 0) (2 0) (2 1) (2 2))
                ((0 0) (1 0) (2 0) (2 1) (2 2) (1 2))
                ((0 0) (1 0) (2 0) (2 1) (2 2) (1 2) (0 2))
                ((0 0) (1 0) (2 0) (2 1) (2 2) (1 2) (0 2))
                ((0 0) (1 0) (2 0) (2 1) (2 2) (1 2) (0 2) (0 3))
                ((0 0) (1 0) (2 0) (2 1) (2 2) (1 2) (0 2) (0 3) (0 4))
                ((0 0) (1 0) (2 0) (2 1) (2 2) (1 2) (0 2) (0 3) (0 4) (1 4))
                ((0 0) (1 0) (2 0) (2 1) (2 2) (1 2) (0 2) (0 3) (0 4) (1 4) (2 4))))


; The following animates the path finding algorithm.
(require 2htdp/image 2htdp/universe)
(define (animate to through from)
  (define background (rectangle (+ 3 (apply max (map first  through)))
                                (+ 3 (apply max (map second through)))
                                "solid" "black"))
  (define (spots-image spots colour background)
    (match spots
      ['() background]
      [`((,x ,y) . ,spots) (spots-image spots colour
                                        (place-image/align (square 1 "solid" colour)
                                                           (add1 x) (add1 y) "left" "top"
                                                           background))]))
  (define building (spots-image through "white" background))
  
  (stage (path to through from))
  (big-bang (next)
            [to-draw (λ (path) (scale 25 (spots-image path "blue" building)))]
            [on-tick (λ (_) (next)) 1/2]
            [stop-when done?]))

(animate (list 2 4) figure-eight (list 0 0))
