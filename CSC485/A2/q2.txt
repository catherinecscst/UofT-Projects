a)
  There are 5 different trees.

  Tree1:

  (S (NP (Det my) (N dog))
     (VP (VP (V saw) (NP (Det a) (N man))) 
         (PP (P with) (NP (NP (Det a) (N statue))
                          (PP (P in) (NP (Det the) (N park)))))))
  Tree2:

  (S (NP (Det my) (N dog)) 
     (VP (VP (VP (V saw) (NP (Det a) (N man))) 
             (PP (P with) (NP (Det a) (N statue)))) 
         (PP (P in) (NP (Det the) (N park)))))
  Tree3:

  (S (NP (Det my) (N dog)) 
     (VP (V saw) 
         (NP (NP (NP (Det a) (N man)) 
                 (PP (P with) (NP (Det a) (N statue)))) 
             (PP (P in) (NP (Det the) (N park))))))
  Tree4:

  (S (NP (Det my) (N dog)) 
     (VP (VP (V saw) (NP (NP (Det a) (N man)) 
                         (PP (P with) (NP (Det a) (N statue))))) 
         (PP (P in) (NP (Det the) (N park)))))
  Tree5:

  (S (NP (Det my) (N dog)) 
     (VP (V saw) 
         (NP (NP (Det a) (N man)) 
             (PP (P with) 
                 (NP (NP (Det a) (N statue)) 
                     (PP (P in) (NP (Det the) (N park))))))))

b)
With the rule: NP → NP PP | Det N, will cause infinite expansions. The recursive parser will keep going down base on the rules until it finish all the search and can not find any match. This rule will cause the parser never reach the end. 
However, with the rule: NP → Det N | NP PP, can solve this problem when the parser can reach to where there's a noun preceded by a determiner. This order change is not a solution in general. For example: "I arrived", this is make rdparser infinitely recurse again.
